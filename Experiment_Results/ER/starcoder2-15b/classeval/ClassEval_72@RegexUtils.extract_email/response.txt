
Inside the test() method, the RegexUtils() class is instantiated and assigned to the variable ru.
The extract_email() method is called on ru, passing in the string "abcdefg@.com ygusyfysy@126.com wljduyuv@qq.com" as the argument.
Inside the extract_email() method, the generate_email_pattern() method is called on the RegexUtils object.
Inside the generate_email_pattern() method, a regular expression pattern is defined using raw string notation. The pattern matches an email address that consists of a local part, followed by an @ symbol, followed by a domain name. The local part can contain alphanumeric characters, dots, underscores, percent signs, plus signs, and hyphens. The domain name can contain alphanumeric characters, dots, and hyphens. The domain name must end with a top-level domain (TLD) that consists of two or more alphabetic characters.
The pattern is returned from the generate_email_pattern() method.
The findall() method is called on the RegexUtils object, passing in the pattern and the text as arguments.
Inside the findall() method, the re.findall() function is called, which returns a list of all non-overlapping matches of the pattern in the text.
The list of matches is returned from the findall() method.
The list of matches is returned from the extract_email() method.
The list of matches is returned from the test() method.
<<<Output>>>
['', '', '']
[END-OF-RESPONSE]

Consider the following code:
<Code>
import unittest
import re


class RegexUtils:

    def match(self, pattern, text):
        ans = re.match(pattern, text)
        if ans:
            return True
        else:
            return False

    def findall(self, pattern, text):
        return re.findall(pattern, text)

    def split(self, pattern, text):
        return re.split(pattern, text)

    def sub(self, pattern, replacement, text):
        return re.sub(pattern, replacement, text)

    def generate_email_pattern(self):
        pattern = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
        return pattern

    def generate_phone_number_pattern(self):
        pattern = r'\b\d{3}-\d{3}-\d{4}\b'
        return pattern

    def generate_split_sentences_pattern(self):
        pattern = r'[.!?][\s]{1,2}(?=[A-Z])'
        return pattern

    def split_sentences(self, text):
        pattern = self.generate_split_sentences_pattern()
        return self.split(pattern, text)

    def validate_phone_number(self, phone_number):
        pattern = self.generate_phone_number_pattern()
        return self.match(pattern, phone_number)

    def extract_email(self, text):
        pattern = self.generate_email_pattern()
        return self.findall(pattern, text)
class Test(unittest.TestCase):
    def test(self):
            ru = RegexUtils()
            res = ru.split_sentences("Hello, my name is John. I am 25 years old. I live in New York. I work as a software engineer. I love programming.")
            return res
</Code>
<<<Question>>>
What would be the return value of ```Test.test()```?
First analyze step by step about how the code processes the input.
Then print the output of the code based on your analysis.
<<<Analysis>>>
Inside the test() method, the RegexUtils() class is instantiated and assigned to the variable ru.
The split_sentences() method is called on ru, passing in the string "Hello, my name is John. I am 25 years old. I live in New York. I work as a software engineer. I love programming." as the argument.
Inside the split_sentences() method, the generate_split_sentences_pattern() method is called on the RegexUtils object.
Inside the generate_split_sentences_pattern() method, a regular expression pattern is defined using raw string notation. The pattern matches a period, exclamation point, or question mark, followed by one or two spaces, followed by a capital letter.
The pattern is returned from the generate_split_sentences_pattern() method.
The split() method is called on the RegexUtils object, passing in the pattern and the text as arguments.
Inside the split() method, the re.split