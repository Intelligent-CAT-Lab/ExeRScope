
Inside the test() method, the PageUtil class is instantiated with the data and page_size parameters.
The data parameter is a list of integers from 1 to 10.
The page_size parameter is set to 3.
The total_items attribute is set to the length of the data list.
The total_pages attribute is calculated by dividing the total_items by the page_size and rounding up to the nearest integer.
The get_page_info() method is called with the page_number parameter set to 3.
Inside the get_page_info() method, the start_index and end_index variables are calculated based on the page_number and page_size.
The start_index is calculated by multiplying the page_number by the page_size and subtracting 1.
The end_index is calculated by adding the start_index to the page_size and taking the minimum of the result and the total_items.
The page_data variable is set to a slice of the data list from start_index to end_index.
The page_info dictionary is created with the current_page, per_page, total_pages, total_items, has_previous, has_next, and data keys.
The data key is set to the page_data list.
The page_info dictionary is returned.
<<<Output>>>
({'current_page': 3, 'per_page': 3, 'total_pages': 4, 'total_items': 10, 'has_previous': True, 'has_next': True, 'data': [7, 8, 9]}, {'current_page': 3, 'per_page': 3, 'total_pages': 4, 'total_items': 10, 'has_previous': True, 'has_next': True, 'data': [7, 8, 9]})
[END-OF-RESPONSE]

Consider the following code:
<Code>
import unittest
class PageUtil:
    def __init__(self, data, page_size):
        self.data = data
        self.page_size = page_size
        self.total_items = len(data)
        self.total_pages = (self.total_items + page_size - 1) // page_size

    def get_page(self, page_number):
        if page_number < 1 or page_number > self.total_pages:
            return []

        start_index = (page_number - 1) * self.page_size
        end_index = start_index + self.page_size
        return self.data[start_index:end_index]

    def get_page_info(self, page_number):
        if page_number < 1 or page_number > self.total_pages:
            return {}

        start_index = (page_number - 1) * self.page_size
        end_index = min(start_index + self.page_size, self.total_items)
        page_data = self.data[start_index:end_index]

        page_info = {
            "current_page": page_number,
            "per_page": self.page_size,
            "total_pages": self.total_pages,
            "total_items": self.total_items,
            "has_previous": page_number > 1,
            "has_next": page_number < self.total_pages,
            "data": page_data
        }
        return page_info

    def search(self, keyword):
        results = [item for item in self.data if keyword in str(item)]
        num_results = len(results)
        num_pages = (num_results + self.page_size - 1) // self.page_size

        search_info = {
            "keyword": keyword,
            "total_results": num_results,
            "total_pages": num_pages,
            "results": results
        }
        return search_info
class Test(unittest.TestCase):
    def test(self):
            self.data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
            self.page_size = 3
            self.page_util = PageUtil(self.data, self.page_size)
            page_number = 3
            expected_info = {
                "current_page": 3,
                "per_page": 3,
                "total_pages": 4,
                "total_items": 10,
                "has_previous": True,
                "has_next": True