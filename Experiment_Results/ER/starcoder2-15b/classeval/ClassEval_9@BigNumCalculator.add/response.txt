
Inside the test() method, the add() method is invoked with two arguments: '123456789012345678922' and '98765432109876543210'.
Inside the add() method, the max() function is used to find the maximum length of the two numbers. The maximum length is 22.
The zfill() method is used to pad the numbers with leading zeros to make them equal in length.
The carry variable is initialized to 0.
The result list is initialized to an empty list.
A for loop is used to iterate over the digits of the numbers from right to left.
Inside the loop, the digit_sum variable is calculated by adding the corresponding digits of the two numbers and the carry.
If the digit_sum is greater than or equal to 10, the carry is set to 1 and the digit is set to the remainder of digit_sum divided by 10.
The digit is added to the beginning of the result list.
If the carry is greater than 0, it is added to the beginning of the result list.
The result list is joined together and returned.
<<<Output>>>
1111111111111111111112
[END-OF-RESPONSE]

Consider the following code:
<Code>
import unittest
class BigNumCalculator:
    @staticmethod
    def add(num1, num2):
        max_length = max(len(num1), len(num2))
        num1 = num1.zfill(max_length)
        num2 = num2.zfill(max_length)

        carry = 0
        result = []
        for i in range(max_length - 1, -1, -1):
            digit_sum = int(num1[i]) + int(num2[i]) + carry
            carry = digit_sum // 10
            digit = digit_sum % 10
            result.insert(0, str(digit))

        if carry > 0:
            result.insert(0, str(carry))

        return ''.join(result)

    @staticmethod
    def subtract(num1, num2):

        if len(num1) < len(num2):
            num1, num2 = num2, num1
            negative = True
        elif len(num1) > len(num2):
            negative = False
        else:
            if num1 < num2:
                num1, num2 = num2, num1
                negative = True
            else:
                negative = False

        max_length = max(len(num1), len(num2))
        num1 = num1.zfill(max_length)
        num2 = num2.zfill(max_length)

        borrow = 0
        result = []
        for i in range(max_length - 1, -1, -1):
            digit_diff = int(num1[i]) - int(num2[i]) - borrow

            if digit_diff < 0:
                digit_diff += 10
                borrow = 1
            else:
                borrow = 0

            result.insert(0, str(digit_diff))

        while len(result) > 1 and result[0] == '0':
            result.pop(0)

        if negative:
            result.insert(0, '-')

        return ''.join(result)

    @staticmethod
    def multiply(num1, num2):
        len1, len2 = len(num1), len(num2)
        result = [0] * (len1 + len2)

        for i in range(len1 - 1, -1, -1):
            for j in range(len2 - 1, -1, -1):
                mul = int(num1[i]) * int(num2[j])
                p1, p2 = i + j, i + j + 1
                total = mul + result[p2]

                result[p1] += total // 10
                result[p2] = total % 10

        start = 0
        while start < len(result) - 1 and result[start] == 0:
            start += 1

        return ''.join(map(str, result[start:]))
class Test(unittest.TestCase):
    def test(self):
            bigNum = BigNumCalculator()
            return bigNum.subtract('123456789012345678922', '9876543210987654321