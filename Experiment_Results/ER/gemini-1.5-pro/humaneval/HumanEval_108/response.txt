<<<Analysis>>>
1. The function `count_nums` takes a list of integers `arr` as input.
2. It first defines a nested function `digits_sum(n)` that takes an integer `n` as input and returns the sum of its digits. 
    * It handles negative numbers by multiplying the first digit by -1.
3. Inside `count_nums`, a list comprehension is used to iterate over each element `i` in `arr`. 
    * For each `i`, it calls `digits_sum(i)` to calculate the sum of its digits. 
    * This creates a new list where each element is the sum of digits of corresponding elements in `arr`.
4. This new list is then passed to `filter(lambda x: x > 0, ...)` which filters the list and keeps only the positive digit sums.
5. The result of `filter` is converted to a list using `list(...)`.
6. Finally, `len(...)` is used to calculate the length of this filtered list, which represents the count of numbers in the input array whose digit sum is positive.
7. For the input `[1, 1, 2, -2, 3, 4, 5]`,  the `digits_sum` function would produce the following list: `[1, 1, 2, -2, 3, 4, 5]`. Then the filtering would keep only `[1, 1, 2, 3, 4, 5]`. The length of this list is 6. 

<<<Output>>>
6
[END-OF-RESPONSE]
