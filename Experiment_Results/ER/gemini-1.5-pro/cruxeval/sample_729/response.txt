<<<Analysis>>>
The function `f` takes two strings, `s1` and `s2`, as input. It aims to find all occurrences of `s2` within `s1` and return a list `res` containing the ending indices of these occurrences.

1. **Initialization:**
   - `res = []`: An empty list `res` is created to store the ending indices.
   - `i = s1.rfind(s2)`: The code starts by finding the last occurrence of `s2` ('abc') within `s1` ('abcdefghabc'). The `rfind()` method returns the starting index of the last occurrence, which is 6 in this case. So, `i` is initialized to 6.

2. **Looping to find all occurrences:**
   - `while i != -1`: This loop continues as long as `i` is not -1, indicating that there are still occurrences of `s2` to be found.
     - `res.append(i+len(s2)-1)`: Inside the loop, the ending index of the current occurrence is calculated as `i + len(s2) - 1` and appended to the `res` list. In the first iteration, this would be 6 + 3 - 1 = 8, which is the ending index of the last occurrence of 'abc'.
     - `i = s1.rfind(s2, 0, i)`:  The code then searches for the next occurrence of `s2` but within a restricted range. It uses `s1.rfind(s2, 0, i)` to search for `s2` within `s1` from the beginning (index 0) up to but not including the current index `i`. This ensures that we find occurrences from right to left. In this step, `i` will be updated to 2, the starting index of the next occurrence.

3. **Loop Iteration:**
   - The loop continues, finding the ending index (2 + 3 - 1 = 4) of the second occurrence of 'abc' and appending it to `res`.
   - In the next `rfind` call, `i` will become -1 as there are no more occurrences of 'abc' within the search range.

4. **Return:**
   - Finally, the loop breaks, and the function returns the `res` list, which contains the ending indices of all occurrences of 'abc' in 'abcdefghabc'.

<<<Output>>>
[8, 4]
[END-OF-RESPONSE] 
