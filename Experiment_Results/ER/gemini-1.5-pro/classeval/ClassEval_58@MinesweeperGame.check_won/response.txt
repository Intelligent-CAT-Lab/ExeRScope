<<<Analysis>>>
The `test()` method instantiates a `MinesweeperGame` object with a 3x3 grid and 1 mine. The `minesweeper_map` and `player_map` are then manually set. The `check_won()` method is then called with the `player_map`.

Let's analyze the `check_won()` method:

1. It iterates through each cell of the provided map.
2. For each cell, it checks if the cell in the `player_map` is still hidden ('-') and the corresponding cell in the `minesweeper_map` is not a mine ('X').
3. If both conditions are true for even a single cell, it means the player hasn't revealed all non-mine cells yet, so it returns `False`.
4. If the loop completes without returning `False`, it means all non-mine cells have been revealed, and the function returns `True`.

Now let's look at the provided maps:

```
minesweeper_map = [['X', 1, 0], [1, 1, 0], [0, 0, 0]]
player_map =     [['-', '-', '-'], ['-', 1, '-'], ['-', '-', '-']]
```

We can see that there are cells where the `player_map` has '-' and the `minesweeper_map` doesn't have 'X'. For example, the cell at (0, 1) and (0, 2) fulfill this condition.

Therefore, the `check_won()` function will return `False`.

<<<Output>>>
```
False
```
[END-OF-RESPONSE] 
