<<<Analysis>>>
Inside the test() method:
1. A list of data is defined: data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
2. A page size is set: page_size = 3
3. A PageUtil object is created with the data and page size: page_util = PageUtil(data, page_size)
4. A page number is specified: page_number = 3
5. An expected_info dictionary is defined, representing the expected output for the given page number.
6. The get_page_info() method of the page_util object is called with the page_number: actual_info = self.page_util.get_page_info(page_number). This method will return a dictionary containing information about the requested page.
7. Finally, the test() method returns a tuple containing actual_info and expected_info.

Inside the get_page_info(page_number) method:
1. It checks if the requested page_number is within the valid range (1 to total_pages).
2. It calculates the start_index and end_index for slicing the data based on the page_number and page_size.
3. It retrieves the page_data by slicing the data using the calculated indices.
4. It constructs a page_info dictionary containing information about the current page, such as the current page number, items per page, total pages, total items, whether there are previous and next pages, and the data for the current page.
5. Finally, it returns the page_info dictionary.
<<<Output>>>
({'current_page': 3, 'per_page': 3, 'total_pages': 4, 'total_items': 10, 'has_previous': True, 'has_next': True, 'data': [7, 8, 9]}, {'current_page': 3, 'per_page': 3, 'total_pages': 4, 'total_items': 10, 'has_previous': True, 'has_next': True, 'data': [7, 8, 9]})
[END-OF-RESPONSE]
