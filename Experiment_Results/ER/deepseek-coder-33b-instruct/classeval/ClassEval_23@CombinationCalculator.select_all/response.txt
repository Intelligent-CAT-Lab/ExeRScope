
<<<Analysis>>>
In the `test()` method, an instance of `CombinationCalculator` is created with a list of strings ["A", "B"]. Then, the `select_all()` method is called on this instance.

The `select_all()` method iterates over the range from 1 to the length of the `datas` list (which is 2 in this case). For each `i`, it calls the `select(i)` method, which generates all combinations of `i` elements from the `datas` list.

The `select(i)` method uses a recursive helper method `_select()` to generate combinations. The `_select()` method takes four parameters: `dataIndex`, `resultList`, `resultIndex`, and `result`. `dataIndex` is the index of the current data element being considered, `resultList` is the current combination being built, `resultIndex` is the index of the current position in `resultList`, and `result` is the list of all combinations generated so far.

The `_select()` method first checks if the length of `resultList` is equal to `resultIndex`. If it is, it adds a copy of `resultList` to `result` and returns.

Then, it iterates over the range from `dataIndex` to the length of `datas` plus the difference between `resultCount` and `resultLen`. For each `i`, it sets the `i`th element of `resultList` to the `i`th element of `datas`, increments `resultIndex`, and calls `_select()` recursively with the updated parameters.

The `select_all()` method returns the list of all combinations generated by `select(i)` for all `i` in the range from 1 to the length of `datas`.

<<<Output>>>
[['A'], ['B'], ['A', 'B'], ['B', 'A']]
[END-OF-RESPONSE]
